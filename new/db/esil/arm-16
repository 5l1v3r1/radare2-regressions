NAME=adr emulation
FILE=malloc://0x200
CMDS=<<EXPECT
e io.cache=true
e asm.bits=16
e asm.arch=arm
s 0x0008735c
wx 30a1
w radare_emulation\x00 @ 0x87420
aei
aeim
aeip
aes
ps @ r1
EXPECT=<<RUN
radare_emulation
RUN


NAME=addw emulation
FILE=malloc://0x200
CMDS=<<EXPECT
e io.cache=true
e asm.bits=16
e asm.arch=arm
s 0x00088a1c 
wx 0ff26c71
w addw_emulation\x00 @ 0x8918c
aei
aeim
aeip
aes
ps @ r1
EXPECT=<<RUN
addw_emulation
RUN

NAME=cmp neq unchanged zf
FILE=malloc://0x200
CMDS=<<EXPECT
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
.aer*
wa cmp r1, 16
aes
?v cpsr & 0xf0000000
EXPECT=<<RUN
0x80000000
RUN

NAME=cmp neq changed zf
FILE=malloc://0x200
CMDS=<<EXPECT
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer cpsr=0xffffffff
.aer*
wa cmp r1, 16
aes
?v cpsr & 0xf0000000
EXPECT=<<RUN
0x80000000
RUN

NAME=cmp eq unchanged zf
FILE=malloc://0x200
CMDS=<<EXPECT
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer r1=0x10
aer cpsr=0x40000000
.aer*
wa cmp r1, 16
aes
?v cpsr & 0xf0000000
EXPECT=<<RUN
0x60000000
RUN

NAME=cmp eq changed zf
FILE=malloc://0x200
CMDS=<<EXPECT
e esil.debug=true
e asm.arch=arm
e asm.bits=16
aei
aeim
aer sp=0x00108000
aer r1=0x10
aer cpsr=0x00000000
.aer*
wa cmp r1, 16
aes
?v cpsr & 0xf0000000
EXPECT=<<RUN
0x60000000
RUN

NAME=ldr.w r0, [r0, r1, lsl 2]
FILE=malloc://0x200
EXPECT=<<EOF
0x11223344
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r0=4
ar r1=2
wx 50f82100
wx aaaaaaaabbbbbbbb44332211@4
aes
ar r0
EOF
RUN

NAME=ldm r3!, {r1, r4, r5}
FILE=malloc://0x200
BROKEN=1
EXPECT=<<EOF
0x11111111
0x44444444
0x55555555
0x00000010
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r3=4		# address
ar r1=0		# init with dummy values
ar r4=0
ar r5=0
wx 32cb
wx 111111114444444455555555@4
aes
ar r1; ar r4; ar r5; ar r3
EOF
RUN

NAME=stm r2!, {r1, r4, r5}
FILE=malloc://0x200
BROKEN=1
EXPECT=<<EOF
0x11111111
0x44444444
0x55555555
0x00000010
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r2=4		# address
ar r1=0x11111111
ar r4=0x44444444
ar r5=0x55555555
wx 32c2
aes
pfv x @ 4; pfv x @ 8; pfv x @ 12; ar r2
EOF
RUN

NAME=ubfx r2, r0, 8, 8
FILE=malloc://0x200
EXPECT=<<EOF
0x00000033
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r0=0x11223344
wx c0f30722
aes
ar r2
EOF
RUN

NAME=it eq
FILE=malloc://0x200
EXPECT=<<EOF
0x0 zf,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 08bf
aoe
EOF
RUN

NAME=it ne
FILE=malloc://0x200
EXPECT=<<EOF
0x0 zf,!,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 18bf00000000
aoe
EOF
RUN

NAME=it hs
FILE=malloc://0x200
EXPECT=<<EOF
0x0 cf,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 28bf00000000
aoe
EOF
RUN

NAME=it lo
FILE=malloc://0x200
EXPECT=<<EOF
0x0 cf,!,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 38bf00000000
aoe
EOF
RUN

NAME=it mi
FILE=malloc://0x200
EXPECT=<<EOF
0x0 nf,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 48bf00000000
aoe
EOF
RUN

NAME=it pl
FILE=malloc://0x200
EXPECT=<<EOF
0x0 nf,!,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 58bf00000000
aoe
EOF
RUN

NAME=it vs
FILE=malloc://0x200
EXPECT=<<EOF
0x0 vf,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 68bf00000000
aoe
EOF
RUN

NAME=it vc
FILE=malloc://0x200
EXPECT=<<EOF
0x0 vf,!,?{,4,pc,+=,}
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 78bf00000000
aoe
EOF
RUN

NAME=it al
FILE=malloc://0x200
EXPECT=<<EOF
0x0 4,pc,+=
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx e8bf00000000
aoe
EOF
RUN

NAME=ldr r2, [r3, r1]
FILE=malloc://0x200
EXPECT=<<EOF
0xeeddccbb
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar r3=1
ar r1=2
wx 5a58aabbccddeeff
aes
ar r2
EOF
RUN

NAME=lsrs r4, r4, 2
FILE=malloc://0x200
EXPECT=<<EOF
0x3ffffffe
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r4=-8
wx a408
aes
ar r4
EOF
RUN

NAME=asrs r4, r4, 2
FILE=malloc://0x200
EXPECT=<<EOF
0xfffffffe
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar > /dev/null
ar r4=-8
wx a410
aes
ar r4
EOF
RUN

NAME=orn
FILE=malloc://0x200
EXPECT=<<EOF
0xfffffffb
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
ar r1=0x3
ar r2=0x7
wv 0x0002ea61
aes
ar r0
EOF
RUN

NAME=add pc
FILE=malloc://0x200
EXPECT=<<EOF
0x00000004
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wv 0x4478
aes
ar r0
EOF
RUN

NAME=ldm.w r0, {r4, r6}
FILE=malloc://0x200
EXPECT=<<EOF
0x11223344
0x55667788
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 90e85000
wv 0x11223344 @ 4
wv 0x55667788 @ 8
aer r0=4
aes
ar r4
ar r6
EOF
RUN

NAME=ldr wrapping around addresses
FILE=malloc://0x200
EXPECT=<<EOF
0x11223344
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 7158 #ldr r1, [r6, r1]
wv 0x11223344 @ 2
aer r1=0x4796eebe
aer r6=0xb8691144
aes
ar r1
EOF
RUN

NAME=add wrapping around
FILE=malloc://0x200
EXPECT=<<EOF
0x00000002
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 0144 #add r1, r0
aer r1=0x4796eebe
aer r0=0xb8691144
aes
ar r1
EOF
RUN

NAME=smmla
FILE=malloc://0x200
EXPECT=<<EOF
0x00000015
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 51fb0001 #smmla r1, r1, r0, r0
aer r1=0x4796eebe
aer r0=0x11
aes
ar r1
EOF
RUN

NAME=smmlar
FILE=malloc://0x200
EXPECT=<<EOF
0x00000016
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 51fb1001 #smmlar r1, r1, r0, r0
aer r1=0x4796eebe
aer r0=0x11
aes
ar r1
EOF
RUN

NAME=umull
FILE=malloc://0x200
EXPECT=<<EOF
0xc105da9e
0x00000004
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx a1fb0212 #umull r1, r2, r1, r2
aer r1=0x4796eebe
aer r2=0x11
aes
ar r1
ar r2
EOF
RUN

NAME=mls
FILE=malloc://0x200
EXPECT=<<EOF
0x0ffcf012
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 01fb1200 #mls r0, r1, r2, r0
aer r0=0x16161616
aer r1=0x45
aer r2=0x7823834
aes
ar r0
EOF
RUN

NAME=mla
FILE=malloc://0x200
EXPECT=<<EOF
0x1c2f3c1a
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 00fb0211 #mla r1, r0, r2, r1
aer r1=0x16161616
aer r0=0x45
aer r2=0x7823834
aes
ar r1
EOF
RUN

NAME=mvn
FILE=malloc://0x200
EXPECT=<<EOF
0xffffffed
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
wx 6ff01201 #mvn r1, 0x12
aes
ar r1
EOF
RUN

NAME=bfc
FILE=malloc://0x200
EXPECT=<<EOF
0x69696980
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r4=0x696969f9
wx 6ff30604 #bfc r4, 0, 7
aes
ar r4
EOF
RUN

NAME=bfi
FILE=malloc://0x200
EXPECT=<<EOF
0x333333e7
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r2=0x696969f9
aer r3=0x33333333
wx 62f38703 #bfi r3, r2, 2, 6
aes
ar r3
EOF
RUN

NAME=rev
FILE=malloc://0x200
EXPECT=<<EOF
0x44332211
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r5=0x11223344
wx 2bba #rev r3, r5
aes
ar r3
EOF
RUN

NAME=rev16
FILE=malloc://0x200
EXPECT=<<EOF
0x22114433
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r7=0x11223344
wx 7eba #rev16 r6, r7
aes
ar r6
EOF
RUN

NAME=revsh positive
FILE=malloc://0x200
EXPECT=<<EOF
0x00004433
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r1=0x11223344
wx cfba #revsh r7, r1
aes
ar r7
EOF
RUN

NAME=revsh negative
FILE=malloc://0x200
EXPECT=<<EOF
0xffff8833
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
aer r1=0x11223388
wx cfba #revsh r7, r1
aes
ar r7
EOF
RUN

NAME=cbz/cbnz likeliness
FILE=malloc://0x200
EXPECT=<<EOF
            0x00000000      0020           movs r0, 0
            0x00000002      0121           movs r1, 1
        ,=< 0x00000004      00b1           cbz r0, 8                   ; likely
        |   0x00000006      00bf           nop
        `-> 0x00000008      0020           movs r0, 0
            0x0000000a      0121           movs r1, 1
        ,=< 0x0000000c      00b9           cbnz r0, 0x10               ; unlikely
EOF
CMDS=<<EOF
e asm.arch=arm
e asm.bits=16
e cfg.bigendian=false
e emu.str=true
wv2 0x2000
wv2 0x2101 @ 2
wv2 0xb100 @ 4
wv2 0xbf00 @ 6
wv2 0x2000 @ 8
wv2 0x2101 @ 10
wv2 0xb900 @ 12
pd 7
EOF
RUN

NAME=pc points to next instruction
FILE=malloc://0x200
CMDS=<<EXPECT
e asm.arch=arm
e asm.bits=16
wx 7846 # mov r0, pc
aes
aer r0
EXPECT=<<RUN
0x00000002
RUN

NAME=lr correct after bl
FILE=malloc://0x200
CMDS=<<EXPECT
e asm.arch=arm
e asm.bits=16
wx 00f002f8 # bl 8
aes
aer lr
aer pc
EXPECT=<<RUN
0x00000004
0x00000008
RUN
