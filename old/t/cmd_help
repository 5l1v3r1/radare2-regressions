#!/bin/sh
# GPL 3+ - Copyright (C) 2011-2016  pancake, Edd Barrett, Simon Ruderich
[ -e tests.sh ] && . ./tests.sh || . ../../tests.sh

# ?vi asumes 64bit values by default

FILE=malloc://1024
NAME=?vi-1
ARGS=
CMDS='
?vi 0xffffffff
?vi8 0xffffffff
?vi4 0xffffffff
?vi2 0xffffffff
?vi1 0xffffffff
?vi4 0xffffffff
?vi2 0xffff
?vi1 0xff
'
EXPECT='4294967295
4294967295
-1
-1
-1
-1
-1
-1
'
run_test


FILE=malloc://1024
NAME=?vi-8
ARGS=
CMDS='
?vi 0xfffffff8
?vi4 0xfffffff8
?vi2 0xfffffff8
?vi1 0xfffffff8
?vi4 0xfffffff8
?vi2 0xfff8
?vi1 0xf8
'
EXPECT='4294967288
-8
-8
-8
-8
-8
-8
'
run_test


## Missing arguments shouldn't cause a crash.

FILE=malloc://1024
ARGS=
CMDS='
?v
?=
??
?e
?r
?b
?f
?p
?s
?S
?x
?X
?l
?t
?!
?+
?-
'
EXPECT_ERR="Whitespace expected after '?f'
Virtual addresses not enabled!
0.004711
"
EXPECT='0
0x0
0

0xrandomnr
0b
0xrandomnr

0
0
0x0
0x0
0x0
'
# %r is a random number. %t displays a different time on each run.
FILTER="sed -e 's/^0x[0-9a-f][0-9a-f][0-9a-f]*$/0xrandomnr/g;
             s/^0\\.00[0-9]*$/0.004711/'"
run_test


## "?e" - echo string

NAME='?e'
FILE=malloc://1024
ARGS=
CMDS='
?e fuck
?e yeah
'
EXPECT='fuck
yeah
'
run_test


## "?r" - generate random number between from-to

NAME='?r'
FILE=malloc://1024
ARGS=
CMDS='
?r
?r
?r
?r
?r
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
?r 10 16
'
EXPECT='0xrandomnr
0xrandomnr
0xrandomnr
0xrandomnr
0xrandomnr
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xsmallrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
0xlargerrandom
'
FILTER="sed 's/^0x[0-9a-f][0-9a-f][0-9a-f][0-9a-f][0-9a-f]*$/0xrandomnr/g;
             s/^0x[0-9]$/0xsmallrandom/g;
             s/^0x[a-f]$/0xlargerrandom/g'"
run_test

## "?v" - hex value of math expr
NAME='?v'
FILE=--
ARGS=
CMDS='
?v 1024
?v 0x42
'
EXPECT='0x400
0x42
'
run_test

NAME="?v 'A'"
FILE=--
ARGS=
CMDS="?v 'A'
"
EXPECT='0x41
'
run_test

NAME="?v 'A'+3"
FILE=--
ARGS=
CMDS="?v 'A'+3
"
EXPECT='0x44
'
run_test

NAME="?v 3+'A'-3"
FILE=--
ARGS=
CMDS="?v 3+'A'-3
"
EXPECT='0x41
'
run_test

NAME="?v 33^'A'"
FILE=--
ARGS=
CMDS="?v 32^'A'
"
EXPECT='0x61
'
run_test

NAME="? 1;?v"
FILE=--
ARGS=
CMDS="? 1;?v"
EXPECT='hex     0x1
octal   01
unit    1
segment 0000:0001
int32   1
string  "\x01"
binary  0b00000001
fvalue: 1.0
float:  0.000000f
double: 0.000000
trits   0t1
1
'
run_test

NAME="? 0;?v"
FILE=--
ARGS=
CMDS="? 0;?v"
EXPECT='hex     0x0
octal   00
unit    0
segment 0000:0000
int32   0
string  "\0"
binary  0b00000000
fvalue: 0.0
float:  0.000000f
double: 0.000000
trits   0t0
0
'
run_test

NAME="? -1"
FILE=--
ARGS=
CMDS="? -1"
EXPECT='hex     0xffffffffffffffff
octal   01777777777777777777777
unit    16.0E
segment fffff000:0fff
int64   -1
string  "\xff\xff\xff\xff\xff\xff\xff\xff"
binary  0b1111111111111111111111111111111111111111111111111111111111111111
fvalue: -1.0
float:  nanf
double: nan
trits   0t11112220022122120101211020120210210211220
'
run_test

NAME="? 2*1.5"
FILE=--
ARGS=
CMDS="? 2*1.5"
EXPECT='hex     0x2
octal   02
unit    2
segment 0000:0002
int32   2
string  "\x02"
binary  0b00000010
fvalue: 3.0
float:  0.000000f
double: 0.000000
trits   0t2
'
run_test

NAME="?*"
FILE=--
ARGS=
CMDS="?*~?display zignspace
?*~?List all loaded types as json"
EXPECT='1
1
'
run_test
