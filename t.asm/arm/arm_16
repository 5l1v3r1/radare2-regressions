#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

test_vector() {
NAME="${PLUGIN} ${BITS}: [${2}]"
if [ "${4}" = "br" ]; then
    BROKEN=1
fi
CMDS='!rasm2 -a '${1}' -b '${BITS}' "'${2}'"
'
if [ "${IGNORE_ERR}" = 1 ]; then
EXPECT="${3}
"
else
EXPECT_ERR="${3}
"
fi
run_test
}

test_invalid() {
IGNORE_ERR=0
test_vector "${1}" "${2}" "Cannot assemble '${2}' at line 3
invalid"
}

PLUGIN=arm
BITS=16

NAME="${PLUGIN}: arm-thumb-mclass (see below)"
CMDS='e asm.arch=arm
e asm.bits=16
e asm.cpu=cortex
wx eff31080
# setting asm.arch ignores previous value of asm.cpu
pi 1
e asm.arch=arm
pi 1
e asm.arch=arm.gnu
pi 1
'
EXPECT='mrs r0, primask
mrs r0, primask
mrs r0, PRIMASK
'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
CMDS='e asm.arch=arm
e asm.bits=16
e asm.cpu=cortex
wx eff31080
pi 1
e asm.arch=arm.gnu
pi 1
'
EXPECT='mrs r0, primask
mrs r0, PRIMASK
'
run_test

# Expected to fail
test_invalid "${PLUGIN}" "b gh"
test_invalid "${PLUGIN}" "lsr r15, r5, 2"
test_invalid "${PLUGIN}" "lsr r2, r15, 2"
test_invalid "${PLUGIN}" "lsr r2, r5, 33"

