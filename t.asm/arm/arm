#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

test_vector() {
NAME="${1} ${BITS}: [${2}]"
if [ "${4}" = "br" ]; then
    BROKEN=1
    if [ -n "${TRAVIS}" ]; then
        unset BROKEN
        return
    fi
fi
CMDS='!rasm2 -a '${1}' -b '32' "'${2}'"
'
if [ "${IGNORE_ERR}" = 1 ]; then
EXPECT="${3}
"
else
EXPECT_ERR="${3}
"
fi
run_test
}

PLUGIN=arm.gnu

test_vector "${PLUGIN}" "addeq r1, r1, r0" 00108100
test_vector "${PLUGIN}" "ands R2, r2" 022012e0
test_vector "${PLUGIN}" "addeq r1, r1, r2, lsl #2" 02118100 "br"
test_vector "${PLUGIN}" "addne r1, r1, ip" 0c108110 
test_vector "${PLUGIN}" "addne r1, r1, r0, lsl #2" 00118110 "br"
test_vector "${PLUGIN}" "andeq r0, r0, 1" 01000002
test_vector "${PLUGIN}" "andeq r3, r5 -2147483648" 02310502 "br"
test_vector "${PLUGIN}" "andne r3, r3, r2" 02300310
test_vector "${PLUGIN}" "andne ip, ip, r7" 07c00c10
test_vector "${PLUGIN}" "asreq r0, ip, 31" cc0fa001 "br"
test_vector "${PLUGIN}" "asrne r0, r4, 31" c40fa011 "br"
test_vector "${PLUGIN}" "beq 8" 0000000a
test_vector "${PLUGIN}" "biceq r3, r3, 7" 0730c303 "br"
test_vector "${PLUGIN}" "blne 0x1900" 3e06001b
test_vector "${PLUGIN}" "bxeq Lr" 1eff2f01 "br"
test_vector "${PLUGIN}" "bxne Lr" 1eff2f11 "br"
test_vector "${PLUGIN}" "clzne r5, sl" 1a5f6f11 "br"
test_vector "${PLUGIN}" "cmpeq sl, r4" 40005a01 "br"
test_vector "${PLUGIN}" "cmpne r7, r6" 06005711
test_vector "${PLUGIN}" "eoreq r2, r2, 1" 01202202
test_vector "${PLUGIN}" "eorne r0, r0, r3" 03002010
test_vector "${PLUGIN}" "eorne r0, r0, r3, lsr #24" 230c2010 "br"
test_vector "${PLUGIN}" "eors R2, r2" 022032e0
test_vector "${PLUGIN}" "ldmdbeQ r2, {r0, r1}" 03001209 "br"
test_vector "${PLUGIN}" "ldmeq r3, {r0, r1, r2, r3}" 0f009308 "br"
test_vector "${PLUGIN}" "ldmeq r5, {r0, r1, r2}" 07009508 "br"
test_vector "${PLUGIN}" "ldmeq r6, {r0, r1}" 03009608 "br"
test_vector "${PLUGIN}" "ldrbeq r5, [r7, -1]" 01505705 "br"
test_vector "${PLUGIN}" "LDRDNE r2, [r3, ip]" dc208311 "br"
test_vector "${PLUGIN}" "ldreq r0, [fp, -180]" b4001b05 "br"
test_vector "${PLUGIN}" "ldrheq r0, [r3, r0]" b0009301 "br"
test_vector "${PLUGIN}" "ldrex r0, [r3]" 9f0f93e1 "br"
test_vector "${PLUGIN}" "lslne r1, r1, 2" 0111a011 "br"
test_vector "${PLUGIN}" "lsreq r0, r0, 16" 2008a001 "br"
test_vector "${PLUGIN}" "lsrne r0, r0, 9" a004a011 "br"
test_vector "${PLUGIN}" "mlaeq r7, r5, r7, r0" 95072700 "br"
test_vector "${PLUGIN}" "mlane r3, r1, r3, r2" 91232310 "br"
test_vector "${PLUGIN}" "moveq r0, sl" 0a00a001
test_vector "${PLUGIN}" "movne r0, r9" 0900a011
test_vector "${PLUGIN}" "mulne r3, r3, r0" 93000310 "br"
test_vector "${PLUGIN}" "mvneq r0, 21" 1500e003
test_vector "${PLUGIN}" "mvneq r0, -2147483648" 0201e003
test_vector "${PLUGIN}" "orreq r5, r5, r3" 03508501
test_vector "${PLUGIN}" "orreq r6, r6, r2, lsr #1" a2608601 "br"
test_vector "${PLUGIN}" "orreq r3, r3, -2147483648" 02318303 "br"
test_vector "${PLUGIN}" "orrne r0, r0, r1, lsl ip" 110c8011 "br"
test_vector "${PLUGIN}" "orrne r1, r1, r3" 03108111
test_vector "${PLUGIN}" "orrs R2, r2" 022092e1
test_vector "${PLUGIN}" "popeq {pc} ; (LDREQQ pc, [sp], 4)" 04f09d04 "br"
test_vector "${PLUGIN}" "popeq {r4, pc}" 1080bd08
test_vector "${PLUGIN}" "popeq {r4, r5, pc}" 3080bd08
test_vector "${PLUGIN}" "popeq {r3, r4, r5, pc}" 3880bd08
test_vector "${PLUGIN}" "popeq {r4, r5, r6, r7, pc}" f080bd08
test_vector "${PLUGIN}" "popeq {r3, r4, r5, r6, r7, pc}" f880bd08
test_vector "${PLUGIN}" "popeq {r3, r4, r5, r6, r7, r8, sl, pc}" f885bd08
test_vector "${PLUGIN}" "popeq {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}" f88fbd08
test_vector "${PLUGIN}" "reveq r3, r3" 333fbf06 "br"
test_vector "${PLUGIN}" "rsbeq ip, r1, r7" 07c06100
test_vector "${PLUGIN}" "rsbne r6, r0, r6" 06606010
test_vector "${PLUGIN}" "stmeq r0, {r2, r3}" 0c008008 "br"
test_vector "${PLUGIN}" "stmeq ip, {r0, r1, r2}" 07008c08 "br"
test_vector "${PLUGIN}" "stmeq ip, {r0, r1, r2, r3}" 0f008c08 "br"
test_vector "${PLUGIN}" "strbeq ip, [r2, -1]" 01c04205 "br"
test_vector "${PLUGIN}" "strbeq r3, [r5]" 0030c505 "br"
test_vector "${PLUGIN}" "strdeq r2, [r4]" f020c401 "br"
test_vector "${PLUGIN}" "strdeq r4, [r8, 80]" f045c801 "br"
test_vector "${PLUGIN}" "streq r3, [r5, -4]" 04300505 "br"
test_vector "${PLUGIN}" "streq r1, [fp, -304]" 30110b05 "br"
test_vector "${PLUGIN}" "strhne r3, [fp, -50]" b2334b11 "br"
test_vector "${PLUGIN}" "strheq r3, [fp, -56]" b8334b01 "br"
test_vector "${PLUGIN}" "strheq r1, [r0]" b010c001 "br"
test_vector "${PLUGIN}" "strhne r1, [r2,r3]" b3108211 "br"
test_vector "${PLUGIN}" "strex r1, r2, [r5]" 921f85e1
test_vector "${PLUGIN}" "subeq ip, r0, 32" 20c04002
test_vector "${PLUGIN}" "subne r6, r3, r6, asr 1" c6604310 "br"
test_vector "${PLUGIN}" "subne r5, r5, r3" 03504510
test_vector "${PLUGIN}" "svceq 0x00000000" 0000000f
test_vector "${PLUGIN}" "umlalnE r4, r5, r3, r7" 9347a510 "br"
test_vector "${PLUGIN}" "uxtbeq r1, r0" 7010ef06 "br"
test_vector "${PLUGIN}" "uxtheq r0, r0" 7000ff06a "br"
test_vector "${PLUGIN}" "vstreq d0, [r0]" 000b800d "br"
test_vector "${PLUGIN}" "ldr r1, [r2, r3, lsl 2]" 031192e7
test_vector "${PLUGIN}" "ldr r1, [r2, r3, lsr 5]" a31292e7
test_vector "${PLUGIN}" "ldr r1, [r2, r3, asr 6]" 431392e7
test_vector "${PLUGIN}" "ldr r1, [r2, r3, ror 9]" e31492e7
test_vector "${PLUGIN}" "mrc p5, 1, r4, c2, c4, 6" d44532ee
test_vector "${PLUGIN}" "mrc p4, 4, r5, c2, c2" 125492ee
test_vector "${PLUGIN}" "mrc p3, 0, r5, c3, c5, 6" d55313ee
test_vector "${PLUGIN}" "bic r1, r2, r3" 0310c2e1
test_vector "${PLUGIN}" "bic r3, r2" 0230c3e1
test_vector "${PLUGIN}" "strb r2, [r3, r4]" 0420c3e7
test_vector "${PLUGIN}" "strb r2, [r3, 6]" 0620c3e5
test_vector "${PLUGIN}" "strbt r3, [r7]" 0030e7e4
test_vector "${PLUGIN}" "strbt r1, [r2]" 0010e2e4
test_vector "${PLUGIN}" "strd r6, r7, [r7, 86]" f665c7e1
test_vector "${PLUGIN}" "strd r2, r3, [r3]" f020c3e1
test_vector "${PLUGIN}" "strexb r2, r5, [r6]" 952fc6e1
test_vector "${PLUGIN}" "strexb r5, r2, [r4]" 925fc4e1
test_vector "${PLUGIN}" "strexh r2, r5, [r6]" 952fe6e1
test_vector "${PLUGIN}" "strexh r5, r2, [r4]" 925fe4e1
test_vector "${PLUGIN}" "strh r5, [r2, r4]" b45082e1
test_vector "${PLUGIN}" "strxh r5, [r2, 4]" b450c2e1 "br"

NAME="${PLUGIN}: [BLNE 0x1900 @ 0xFF7A46EC]"
FILE=malloc://32
BROKEN=1
CMDS="!rasm2 -a ${PLUGIN} -b 32 -o 0xFF7A46EC -d 8374211b"
EXPECT="blne 0x00001900
"
run_test

NAME="${PLUGIN}: add r2, r2, r1, nop, bx r2, blx r5"
CMDS='
e asm.arch='${PLUGIN}'
e asm.bits=32
wa add r2, r2, r1
s+$l
wa nop
s+$l
wa bx r2
s+$l
wa blx r5
s+$l
?v $$
pi 4 @0
'
EXPECT='0x10
add r2, r2, r1
nop   ; (mov r0, r0)
bx r2
blx r5
'
run_test


NAME="${PLUGIN}: arm-endian"
CMDS='
e asm.arch='${PLUGIN}'
e asm.bits=32
e cfg.bigendian=0
pa mov r0, 33
e cfg.bigendian=1
pa mov r0, 33
e cfg.bigendian=0
pad 2100a0e3
e cfg.bigendian=1
pad e3a00021
'
EXPECT='2100a0e3
e3a00021
mov r0, 33
mov r0, 33
'

run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa blx 0xfb000134 @ 0xfb00048a"
EXPECT='fff754ee'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa blx 0x22211C @ 0x00005CE4"
EXPECT='1cf21aea'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa bl 0xF4001260 @ 0xF40003B2"
EXPECT='00f055ff'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa blx 0xF4002A6C @ 0xF40003A0"
EXPECT='02f064eb'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa bl 0xF4002862 @ 0xF40028F6"
EXPECT='fff7b4ff'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=1
ARGS="-a arm -b 16"
CMDS="pa blx 0xF4002AF4 @ 0xF40006E4"
EXPECT='02f006ea'
run_test

NAME="${PLUGIN}: arm-thumb-mclass"
BROKEN=
ARGS="-a arm -b 16"
CMDS="pa b lr"
EXPECT=''
EXPECT_ERR='Invalid-instruction'
run_test


