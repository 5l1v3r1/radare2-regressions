#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

# Tests only whole disassembly opcode
test_vector() {
NAME="${1}: [${2}]"
FILE=malloc://32
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
wx '${3}'
pi 1
'
EXPECT="${4}
"
run_test
}

# Tests jump analysis
test_jump() {
NAME="${1}: [${2}] - jump check"
FILE=malloc://32
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
wx '${3}'
ao 1~jump
'
EXPECT="jump: ${4}
"
run_test
}

# Tests opcode length
test_length() {
NAME="${1}: [${2}] - length check"
FILE=malloc://32
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
wx '${3}'
ao 1~size
'
EXPECT="size: ${4}
"
run_test
}

PLUGIN=8051

# -------------------------------
# bitness check
NAME="8051: checking bitness (asm.bits)"
FILE=malloc://32
CMDS='
e asm.arch=8051
e asm.bits
'
EXPECT='8
'
run_test

# -------------------------------
# bitness writing check
NAME="8051: checking bitness writing (asm.bits)"
BROKEN=
FILE=malloc://32
CMDS='
e asm.arch=8051
e asm.bits=8
'
EXPECT=''
run_test

test_vector "${PLUGIN}"	"ADD a,r3"	2b	"add a, r3"
test_vector "${PLUGIN}"	"ADDC a,imm"	3438	"addc a, 0x38"
test_vector "${PLUGIN}"	"ANL a,imm"	5401	"anl a, 0x1"
test_vector "${PLUGIN}" "ANL dir,imm"	53c9df	"anl 0xc9, 0xdf"	"br"
test_vector "${PLUGIN}"	"CJNE a,imm,offs" b4ab13 "cjne 0xab, 0x13" 	"br"
test_jump "${PLUGIN}"	"CJNE a,imm,offs" b4ab13 "0x00000013"		"br"
test_vector "${PLUGIN}" "CJNE r7,imm,offs" bf0205 "cjne r7, 0x02, 0x05"
test_jump "${PLUGIN}"	"CJNE r7,imm,offs" bf0205 "0x00000005"		"br"
test_vector "${PLUGIN}"	"CLR a"		e4	"clr a"			"br"
test_vector "${PLUGIN}" "CLR bit"	ceaf	"clr 0xaf"		"br"
test_vector "${PLUGIN}"	"CPL a"		f4	"cpl a"			"br"
test_vector "${PLUGIN}"	"DEC a"		14	"dec a"			"br"
test_vector "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"djnz r0, 0xfc"
test_jump "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"0x000000fc"		"br"
test_length "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"2"
test_vector "${PLUGIN}" "DJNZ r7,offs"	dffa	"djnz r7, 0xfa"
test_length "${PLUGIN}" "DJNZ r7,offs"	dffa	"2"			"br"
test_vector "${PLUGIN}"	"INC r0"	08	"inc r0"
test_vector "${PLUGIN}"	"JB bit,offs"	207d03	"jb 0x7d, 0x03"		"br"
test_jump "${PLUGIN}"	"JB bit,offs"	207d03	"0x00000003"		"br"
test_vector "${PLUGIN}"	"JBC bit,offs"	101508	"jbc 0x15, 0x08"	"br"
test_jump "${PLUGIN}"	"JBC bit,offs"	101508	"0x00000008"		"br"
test_vector "${PLUGIN}"	"JC offs"	4003	"jc 0x05"
test_jump "${PLUGIN}"	"JC offs"	4003	"0x00000005"
test_vector "${PLUGIN}"	"JNB bit,offs"	305108	"jnb 0x51, 0x08"	"br"
test_jump "${PLUGIN}"	"JNB bit,offs"	305108	"0x00000008"		"br"
test_vector "${PLUGIN}"	"JNC offs"	5007	"jnc 0x09"
test_jump "${PLUGIN}"	"JNC offs"	5007	"0x00000009"
test_vector "${PLUGIN}"	"JZ offs"	6013	"jz 0x15"
test_jump "${PLUGIN}"	"JZ offs"	6013	"0x00000015"
test_vector "${PLUGIN}"	"LCALL addr16"	12b6cf	"lcall 0xb6cf"
test_jump "${PLUGIN}"	"LCALL add16"	12b6cf	"0x0000b6cf"
test_vector "${PLUGIN}"	"LJMP addr16"	022c0d	"ljmp 0x2c0d"
test_jump "${PLUGIN}"	"LJMP addr16"	022c0d	"0x00002c0d"
test_vector "${PLUGIN}"	"MOV @r0,a"	f6	"mov @r0, a"
test_vector "${PLUGIN}"	"MOV @r1,a"	f7	"mov @r1, a"
test_vector "${PLUGIN}"	"MOV r1"	7900	"mov r1, 0x00"
test_vector "${PLUGIN}"	"MOV r2"	7a00	"mov r2, 0x00"
test_vector "${PLUGIN}"	"MOV r3"	7b00	"mov r3, 0x00"
test_vector "${PLUGIN}"	"MOV r4"	7c00	"mov r4, 0x00"
test_vector "${PLUGIN}"	"MOV r5"	7d00	"mov r5, 0x00"
test_vector "${PLUGIN}"	"MOV dir,imm"	75a07f	"mov 0xa0, 0x7f"	"br"
test_vector "${PLUGIN}" "MOV dir,r4"	8c83	"mov 0x83, r4"		"br"
test_vector "${PLUGIN}"	"MOVC a,@a+dptr" 93	"movc a, @a+dptr"
test_vector "${PLUGIN}"	"MOVX a,@dptr"	e0	"movx a, @dptr"
test_vector "${PLUGIN}"	"MUL ab"	a4	"mul ab" 		"br"
test_vector "${PLUGIN}"	"ORL a,imm"	4480	"orl a, 0x80"
test_vector "${PLUGIN}" "ORL dir,imm"	43dc02	"orl 0x43, 0x02"	"br"
test_vector "${PLUGIN}"	"PUSH dir"	c083	"push 0x83"
test_vector "${PLUGIN}"	"POP dir"	d083 	"pop 0x83"
test_vector "${PLUGIN}"	"RET"		22	"ret"
test_vector "${PLUGIN}"	"RLC a"		33	"rlc a"
test_vector "${PLUGIN}"	"RRC a"		13	"rrc a"
test_vector "${PLUGIN}"	"SETB bit"	d242	"setb 0x42"
test_vector "${PLUGIN}"	"SETB c"	d3	"setb c"
test_vector "${PLUGIN}"	"SJMP addr11"	8014	"sjmp 0x16"
test_jump "${PLUGIN}"	"SJMP addr11"	8014	"0x00000016"
test_vector "${PLUGIN}"	"SUBB a,@r0"	96	"subb a, @r0"
test_vector "${PLUGIN}"	"SWAP a"	c4	"swap a" 		"br"
test_vector "${PLUGIN}"	"XRL a,imm"	64fa	"xrl a, 0xfa"

# -------------------------------
# 8051 instruction length
NAME="8051 instruction length"
FILE=malloc://32
BROKEN=
CMDS='
e asm.arch=8051
wx 30450d @ 0
wx d268 @ 3
wx ef @ 3+2
ao 3~size
'
EXPECT='size: 3
size: 2
size: 1
'
run_test

