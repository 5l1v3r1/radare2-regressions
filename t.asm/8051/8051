#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

# Tests only whole disassembly opcode
test_vector() {
NAME="${1}: [${2}]"
FILE=malloc://10000
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
s 0x1200
wx '${3}'
pi 1
'
EXPECT="${4}
"
run_test
}

# Tests jump analysis
test_jump() {
NAME="${1}: [${2}] - jump check"
FILE=malloc://10000
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
s 0x1200
wx '${3}'
ao 1~jump
'
EXPECT="jump: ${4}
"
run_test
}

# Tests opcode length
test_length() {
NAME="${1}: [${2}] - length check"
FILE=malloc://32
if [ "${5}" = "br" ]; then
	BROKEN=1
fi
CMDS='
e asm.arch='${1}'
wx '${3}'
ao 1~size
'
EXPECT="size: ${4}
"
run_test
}

PLUGIN=8051

# -------------------------------
# bitness check
NAME="8051: checking bitness (asm.bits)"
FILE=malloc://32
CMDS='
e asm.arch=8051
e asm.bits
'
EXPECT='8
'
run_test

# -------------------------------
# bitness writing check
NAME="8051: checking bitness writing (asm.bits)"
BROKEN=
FILE=malloc://32
CMDS='
e asm.arch=8051
e asm.bits=8
'
EXPECT=''
run_test

# NOTE: test_vector and test_jump are using 0x1200 as base address

# ACALL
test_vector "${PLUGIN}" "ACALL addr11"	f123	"acall 0x1723"
test_jump   "${PLUGIN}"	"ACALL addr11"	f123	"0x00001723"
# ADD
test_vector "${PLUGIN}" "ADD a,imm"	2403	"add a, #0x03"
test_vector "${PLUGIN}" "ADD a,dir"	2520	"add a, 0x20"
test_vector "${PLUGIN}"	"ADD a,@r1"	27	"add a, @r1"
test_vector "${PLUGIN}"	"ADD a,r3"	2b	"add a, r3"
# ADDC
test_vector "${PLUGIN}"	"ADDC a,imm"	3438	"addc a, #0x38"
test_vector "${PLUGIN}"	"ADDC a,dir"	3530	"addc a, 0x30"
test_vector "${PLUGIN}"	"ADDC a,@r0"	36	"addc a, @r0"
test_vector "${PLUGIN}"	"ADDC a,r5"	3d	"addc a, r5"
# AJMP
test_vector "${PLUGIN}"	"AJMP addr11"	e123	"ajmp 0x1723"
test_jump   "${PLUGIN}"	"AJMP addr11"	e123	"0x00001723"
# ANL
test_vector "${PLUGIN}"	"ANL a,imm"	5401	"anl a, #0x01"
test_vector "${PLUGIN}" "ANL a,dir"	5540	"anl a, 0x40"
test_vector "${PLUGIN}" "ANL a,@r0"	56	"anl a, @r0"
test_vector "${PLUGIN}" "ANL a,r4"	5c	"anl a, r4"
test_vector "${PLUGIN}" "ANL c,bit"	8222	"anl c, 0x24.2"
test_vector "${PLUGIN}" "ANL c,/bit"	b022	"anl c, /0x24.2"
test_vector "${PLUGIN}" "ANL dir,a"	5240	"anl 0x40, a"
test_vector "${PLUGIN}" "ANL dir,imm"	53c9df	"anl 0xc9, #0xdf"
# CJNE
test_vector "${PLUGIN}"	"CJNE a,imm,offs" b4ab13 "cjne a, #0xab, 0x1216"
test_jump   "${PLUGIN}"	"CJNE a,imm,offs" b4ab13 "0x00001216"
test_vector "${PLUGIN}" "CJNE a,dir,offs" b56018 "cjne a, 0x60, 0x121b"
test_jump   "${PLUGIN}"	"CJNE a,dir,offs" b56018 "0x0000121b"
test_vector "${PLUGIN}" "CJNE @r1,imm,offs" b72432 "cjne @r1, #0x24, 0x1235"
test_jump   "${PLUGIN}"	"CJNE @r1,imm,offs" b72432 "0x00001235"
test_vector "${PLUGIN}" "CJNE r7,imm,offs" bf0205 "cjne r7, #0x02, 0x1208"
test_jump   "${PLUGIN}"	"CJNE r7,imm,offs" bf0205 "0x00001208"
# CLR
test_vector "${PLUGIN}"	"CLR a"		e4	"clr a"
test_vector "${PLUGIN}" "CLR bit"	c2af	"clr 0xa8.7"
test_vector "${PLUGIN}"	"CLR c"		c3	"clr c"
# CPL
test_vector "${PLUGIN}"	"CPL a"		f4	"cpl a"
test_vector "${PLUGIN}" "CPL bit"	b255	"cpl 0x2a.5"
test_vector "${PLUGIN}"	"CPL c"		b3	"cpl c"
# DA
test_vector "${PLUGIN}"	"DA a"		d4	"da a"
# DEC
test_vector "${PLUGIN}"	"DEC a"		14	"dec a"
test_vector "${PLUGIN}"	"DEC dir"	1535	"dec 0x35"
test_vector "${PLUGIN}"	"DEC @r1"	17	"dec @r1"
test_vector "${PLUGIN}"	"DEC r7"	1f	"dec r7"
# DIV
test_vector "${PLUGIN}"	"DIV ab"	84	"div ab"
# DJNZ
test_vector "${PLUGIN}"	"DJNZ dir,offs"	d54088	"djnz 0x40, 0x118b"
test_jump   "${PLUGIN}"	"DJNZ dir,offs"	d54088	"0x0000118b"
test_vector "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"djnz r0, 0x11fe"
test_jump   "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"0x000011fe"
test_length "${PLUGIN}"	"DJNZ r0,offs"	d8fc	"2"
test_vector "${PLUGIN}" "DJNZ r7,offs"	dffa	"djnz r7, 0x11fc"
test_length "${PLUGIN}" "DJNZ r7,offs"	dffa	"2"
# INC
test_vector "${PLUGIN}"	"INC a" 	04	"inc a"
test_vector "${PLUGIN}"	"INC dir"	0534	"inc 0x34"
test_vector "${PLUGIN}"	"INC dptr"	a3	"inc dptr"
test_vector "${PLUGIN}"	"INC r0"	08	"inc r0"
# JB
test_vector "${PLUGIN}"	"JB bit,offs"	207d03	"jb 0x2f.5, 0x1206"
test_jump   "${PLUGIN}"	"JB bit,offs"	207d03	"0x00001206"
# JBC
test_vector "${PLUGIN}"	"JBC bit,offs"	101508	"jbc 0x22.5, 0x120b"
test_jump   "${PLUGIN}"	"JBC bit,offs"	101508	"0x0000120b"
# JC
test_vector "${PLUGIN}"	"JC offs"	4003	"jc 0x1205"
test_jump   "${PLUGIN}"	"JC offs"	4003	"0x00001205"
# JMP
test_vector "${PLUGIN}"	"JMP @a+dptr"	73	"jmp @a+dptr"
# JNB
test_vector "${PLUGIN}"	"JNB bit,offs"	305108	"jnb 0x2a.1, 0x120b"
test_jump   "${PLUGIN}"	"JNB bit,offs"	305108	"0x0000120b"
# JNC
test_vector "${PLUGIN}"	"JNC offs"	5007	"jnc 0x1209"
test_jump   "${PLUGIN}"	"JNC offs"	5007	"0x00001209"
# JNZ
test_vector "${PLUGIN}"	"JNZ offs"	7013	"jnz 0x1215"
test_jump   "${PLUGIN}"	"JNZ offs"	7013	"0x00001215"
# JZ
test_vector "${PLUGIN}"	"JZ offs"	6015	"jz 0x1217"
test_jump "${PLUGIN}"	"JZ offs"	6015	"0x00001217"
# LCALL
test_vector "${PLUGIN}"	"LCALL addr16"	12b6cf	"lcall 0xb6cf"
test_jump "${PLUGIN}"	"LCALL add16"	12b6cf	"0x0000b6cf"
# LJMP
test_vector "${PLUGIN}"	"LJMP addr16"	022c0d	"ljmp 0x2c0d"
test_jump "${PLUGIN}"	"LJMP addr16"	022c0d	"0x00002c0d"
# MOV
test_vector "${PLUGIN}"	"MOV a,imm"	74ff	"mov a, #0xff"
test_vector "${PLUGIN}"	"MOV a,dir"	e520	"mov a, 0x20"
test_vector "${PLUGIN}"	"MOV a,@r1"	e7	"mov a, @r1"
test_vector "${PLUGIN}"	"MOV a,r6"	ee	"mov a, r6"
test_vector "${PLUGIN}"	"MOV bit,c"	9222	"mov 0x24.2, c"
test_vector "${PLUGIN}"	"MOV c,bit"	a222	"mov c, 0x24.2"
test_vector "${PLUGIN}"	"MOV dir,a"	f544	"mov 0x44, a"
test_vector "${PLUGIN}"	"MOV dir,imm"	75a07f	"mov 0xa0, #0x7f"
test_vector "${PLUGIN}"	"MOV srcdir,destdir"	854455	"mov 0x55, 0x44"
test_vector "${PLUGIN}"	"MOV dir,@r1"	8744	"mov 0x44, @r1"
test_vector "${PLUGIN}" "MOV dir,r4"	8c83	"mov 0x83, r4"
test_vector "${PLUGIN}" "MOV dptr,imm"	901234	"mov dptr, #0x1234"
test_vector "${PLUGIN}"	"MOV @r0,a"	f6	"mov @r0, a"
test_vector "${PLUGIN}"	"MOV @r1,imm"	7700	"mov @r1, #0x00"
test_vector "${PLUGIN}"	"MOV @r0,dir"	a620	"mov @r0, 0x20"
test_vector "${PLUGIN}"	"MOV r5,a"	fd	"mov r5, a"
test_vector "${PLUGIN}"	"MOV r1,imm"	7900	"mov r1, #0x00"
test_vector "${PLUGIN}"	"MOV r2,dir"	aa32	"mov r2, 0x32"
# MOVC
test_vector "${PLUGIN}"	"MOVC a,@a+pc"	83	"movc a, @a+pc"
test_vector "${PLUGIN}"	"MOVC a,@a+dptr" 93	"movc a, @a+dptr"
# MOVX
test_vector "${PLUGIN}"	"MOVX a,@dptr"	e0	"movx a, @dptr"
test_vector "${PLUGIN}"	"MOVX a,@r1"	e3	"movx a, @r1"
test_vector "${PLUGIN}"	"MOVX @dptr,a"	f0	"movx @dptr, a"
test_vector "${PLUGIN}"	"MOVX @r0,a"	f2	"movx @r0, a"
# MUL
test_vector "${PLUGIN}"	"MUL ab"	a4	"mul ab"
# NOP
test_vector "${PLUGIN}" "NOP"		00	"nop"
# ORL
test_vector "${PLUGIN}"	"ORL a,imm"	4480	"orl a, #0x80"
test_vector "${PLUGIN}"	"ORL a,dir"	4532	"orl a, 0x32"
test_vector "${PLUGIN}"	"ORL a,@r0"	46	"orl a, @r0"
test_vector "${PLUGIN}"	"ORL a,r5"	4d	"orl a, r5"
test_vector "${PLUGIN}"	"ORL c,bit"	7222	"orl c, 0x24.2"
test_vector "${PLUGIN}"	"ORL c,/bit"	a022	"orl c, /0x24.2"
test_vector "${PLUGIN}"	"ORL dir,a"	4222	"orl 0x22, a"
test_vector "${PLUGIN}" "ORL dir,imm"	43dc02	"orl 0xdc, #0x02"
# POP
test_vector "${PLUGIN}"	"POP dir"	d083 	"pop 0x83"
# PUSH
test_vector "${PLUGIN}"	"PUSH dir"	c083	"push 0x83"
# RET
test_vector "${PLUGIN}"	"RET"		22	"ret"
# RETI
test_vector "${PLUGIN}" "RETI"		32	"reti"
# RL
test_vector "${PLUGIN}"	"RL a"		23	"rl a"
# RLC
test_vector "${PLUGIN}"	"RLC a"		33	"rlc a"
# RR
test_vector "${PLUGIN}"	"RR a"		03	"rr a"
# RRC
test_vector "${PLUGIN}"	"RRC a"		13	"rrc a"
# SETB
test_vector "${PLUGIN}"	"SETB bit"	d242	"setb 0x28.2"
test_vector "${PLUGIN}"	"SETB c"	d3	"setb c"
# SJMP
test_vector "${PLUGIN}"	"SJMP offs"	8014	"sjmp 0x1216"
test_jump "${PLUGIN}"	"SJMP offs"	8014	"0x00001216"
# SUBB
test_vector "${PLUGIN}"	"SUBB a,imm"	9401	"subb a, #0x01"
test_vector "${PLUGIN}"	"SUBB a,dir"	9544	"subb a, 0x44"
test_vector "${PLUGIN}"	"SUBB a,@r0"	96	"subb a, @r0"
test_vector "${PLUGIN}"	"SUBB a,r5"	9d	"subb a, r5"
# SWAP
test_vector "${PLUGIN}"	"SWAP a"	c4	"swap a"
# XCH
test_vector "${PLUGIN}"	"XCH a,dir"	c545	"xch a, 0x45"
test_vector "${PLUGIN}"	"XCH a,@r0"	c6	"xch a, @r0"
test_vector "${PLUGIN}"	"XCH a,r6"	ce	"xch a, r6"
# XCHD
test_vector "${PLUGIN}"	"XCHD a,@r1"	d7	"xchd a, @r1"
# XRL
test_vector "${PLUGIN}"	"XRL a,imm"	64fa	"xrl a, #0xfa"
test_vector "${PLUGIN}"	"XRL a,dir"	6534	"xrl a, 0x34"
test_vector "${PLUGIN}"	"XRL a,@r0"	66	"xrl a, @r0"
test_vector "${PLUGIN}"	"XRL a,r7"	6f	"xrl a, r7"
test_vector "${PLUGIN}"	"XRL dir,a"	6234	"xrl 0x34, a"
test_vector "${PLUGIN}"	"XRL dir,imm"	6334ff	"xrl 0x34, #0xff"

# -------------------------------
# 8051 instruction length
NAME="8051 instruction length"
FILE=malloc://32
BROKEN=
CMDS='
e asm.arch=8051
wx 30450d @ 0
wx d268 @ 3
wx ef @ 3+2
ao 3~size
'
EXPECT='size: 3
size: 2
size: 1
'
run_test

