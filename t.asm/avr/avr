#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done



PLUGIN=avr

# Relative instructions require additional handling

# -------------------------------
# BRBC instructions group
NAME="${PLUGIN} Asm: [brbc commands]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wa brcc 0x4 @ 0
wa brne 0x6 @ 2
wa brpl 0x8 @ 4
wa brvc 0xa @ 6
wa brge 0xc @ 8
wa brhc 0xe @ 0xa
wa brtc 0x10 @ 0xc
wa brid 0x12 @ 0xe 
p8 16
'
EXPECT='08f409f40af40bf40cf40df40ef40ff4
'
run_test

NAME="${PLUGIN} DISasm: [brbc commands]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 08f4 @ 0
wx 09f4 @ 2
wx 0af4 @ 4
wx 0bf4 @ 6
wx 0cf4 @ 8
wx 0df4 @ 0xa
wx 0ef4 @ 0xc
wx 0ff4 @ 0xe 
pi 8
'
EXPECT='brcc 0x4
brne 0x6
brpl 0x8
brvc 0xa
brge 0xc
brhc 0xe
brtc 0x10
brid 0x12
'
run_test

# -------------------------------
# BRBS instructions group
NAME="${PLUGIN} Asm: [brbs commads]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wa brcs 0x4 @ 0
wa breq 0x6 @ 2
wa brmi 0x8 @ 4
wa brvs 0xa @ 6
wa brlt 0xc @ 8
wa brhs 0xe @ 0xa
wa brts 0x10 @ 0xc
wa brie 0x12 @ 0xe
p8 16
'
EXPECT='08f009f00af00bf00cf00df00ef00ff0
'
run_test

NAME="${PLUGIN} DISasm: [brbs commads]"
FILE=malloc://32
CMDS='
e asm.arch=avr
wx 08f0 @ 0
wx 09f0 @ 2
wx 0af0 @ 4
wx 0bf0 @ 6
wx 0cf0 @ 8
wx 0df0 @ 0xa
wx 0ef0 @ 0xc
wx 0ff0 @ 0xe 
pi 8
'
EXPECT='brcs 0x4
breq 0x6
brmi 0x8
brvs 0xa
brlt 0xc
brhs 0xe
brts 0x10
brie 0x12
'
run_test


NAME="${PLUGIN} DISasm: [0e940b10 => 0x00002016] (ANAL)"
FILE=malloc://4096
CMDS='
e asm.arch=avr
wx 0e940b10 @ 0x2d0
s 0x2d0
ao 1~jump[1]
'
EXPECT='0x00002016
'
run_test

NAME="${PLUGIN} DISasm: [0e940b10 => call] - jump check"
FILE=malloc://4096
CMDS='
e asm.arch=avr
s 0x2d0
wx 0e940b10
ao 1~jump
'
EXPECT='jump: 0x00002016
'
run_test
# /additional analyzer tests for call

NAME="${PLUGIN} DISasm: [sts] - jump check"
FILE=malloc://4096
CMDS='
e asm.arch=avr
s 0x2d0
wx 9093c007
ao 1~jump
'
EXPECT=''
run_test

# the next two is broken
NAME="${PLUGIN} DISasm: negative baddr"
BROKEN=1
FILE=../../bins/elf/analysis/bugurtos-avr.elf
ARGS=
CMDS='s 0x506
pd 2~!1
s+2
pd 1
'
EXPECT='call 0x18CE
call 0x18CE
'
run_test

NAME="${PLUGIN} DISasm: opcode size"
FILE=-
ARGS=
CMDS='e asm.arch=avr
wx 0e941122
ao~size[1]
'
EXPECT='4
'
run_test
