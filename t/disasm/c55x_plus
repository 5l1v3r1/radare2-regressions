#!/bin/sh
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

# -------------------------------
# ADD instruction

BROKEN=
NAME="C55x+: ADD"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 740131
pi 1
'
EXPECT='add t1, ac1
'
run_test

# -------------------------------
# ADD instruction

BROKEN=
NAME="C55x+: ADD (complex)"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx c261410001
pi 1
'
EXPECT='add #0x1 << #0xe, ac1, ac1
'
run_test

# -------------------------------
# AMAR instruction (3 ops)

BROKEN=
NAME="C55x+: AMAR - 3 operands"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx ea928014c03f
pi 1
'
EXPECT='amar *ar+2, *ar+4, *ar15
'
run_test

# -------------------------------
# AMAR instruction (1 op)

BROKEN=
NAME="C55x+: AMAR - 1 operand"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 621200
pi 1
'
EXPECT='amar *(ar2+t0b)
'
run_test

# -------------------------------
# ASUB instruction

BROKEN=
NAME="C55x+: ASUB"
FILE=malloc://32
CMDS='
e asm.arch=c55+
e io.va=true
wx ae21000b
pi 1
'
EXPECT='asub #0xb, xar1
'
run_test

# -------------------------------
# BCLR instruction

BROKEN=
NAME="C55x+: BCLR"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 0a0a
pi 1
'
EXPECT='bclr st0_acov0, st0_55
'
run_test

# -------------------------------
# CMP instruction

BROKEN=
NAME="C55x+: CMP"
FILE=malloc://32
CMDS='
e asm.arch=c55+
e io.va=true
wx a4323300
pi 1
'
EXPECT='cmp t2 == t3, tc1
'
run_test

# -------------------------------
# MACM instruction

BROKEN=
NAME="C55x+: MACM"
FILE=malloc://32
CMDS='
e asm.arch=c55+
e io.va=true
wx c832803400
pi 1
'
EXPECT='macm *ar2, *ar4, ac0, ac0
'
run_test

# -------------------------------
# MOV instruction (with complex operand)

BROKEN=
NAME="C55x+: MOV (with complex operand)"
FILE=malloc://32
CMDS='
e asm.arch=c55+
e io.va=true
wx b410004032
pi 1
'
EXPECT='mov *(ar0+t0b) << t2, ac0
'
run_test

# -------------------------------
# MOV instruction (combined)

BROKEN=
NAME="C55x+: MOV (combined with another instruction)"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 395102a0b411014033
pi 1
'
EXPECT='mov ac0.l, *ar2 || mov *(ar1+t0b) << t3, ac1
'
run_test

# -------------------------------
# MOV instruction

BROKEN=
NAME="C55x+: MOV"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 770030
pi 1
'
EXPECT='mov t0, ac0
'
run_test

# -------------------------------
# MPYM instruction

BROKEN=
NAME="C55x+: MPYM"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx c832003400
pi 1
'
EXPECT='mpym *ar2, *ar4, ac0
'
run_test

# -------------------------------
# SUB instruction

BROKEN=
NAME="C55x+: SUB"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 740081
pi 1
'
EXPECT='sub ac1, ac0
'
run_test

# -------------------------------
# BCC instruction

BROKEN=
NAME="C55x+: BCC"
FILE=malloc://512280
CMDS='
e asm.arch=c55+
e io.va=true
wx 6a23f0 @ 0x53307
s 0x53307
pi 1
'
EXPECT='bcc #0x000023, !overflow(ac0)
'
run_test

# -------------------------------
# BCC instruction (jump check)

BROKEN=
NAME="C55x+: BCC - jump check"
FILE=malloc://512280
CMDS='
e asm.arch=c55+
e io.va=true
wx 6a23f0 @ 0x53307
s 0x53307
ao 1~jump
'
EXPECT='jump: 0x0005332d
'
run_test

# -------------------------------
# B instruction

BROKEN=
NAME="C55x+: B"
FILE=malloc://512280
CMDS='
e asm.arch=c55+
e io.va=true
wx 68ffa1 @ 0x5332a
s 0x5332a
pi 1
'
EXPECT='b #0x00ffa1
'
# -------------------------------
# B instruction (jump check)

BROKEN=
NAME="C55x+: B - jump check"
FILE=malloc://512280
CMDS='
e asm.arch=c55+
e io.va=true
wx 68ffa1 @ 0x5332a
s 0x5332a
ao 1~jump
'
EXPECT='jump: 0x000532ce
'
run_test

# -------------------------------
# POP instruction

BROKEN=
NAME="C55x+: POP"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 713233
pi 1
'
EXPECT='pop t2, t3
'
run_test

# -------------------------------
# POP MMAP instruction

BROKEN=
NAME="C55x+: POP MMAP"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 2461e508
pi 1
'
EXPECT='pop mmap(@st1_55)
'
run_test

# -------------------------------
# PUSH MMAP instruction

BROKEN=
NAME="C55x+: PUSH MMAP"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 2461e400
pi 1
'
EXPECT='psh mmap(@st0_55)
'
run_test

# -------------------------------
# PUSH BOTH instruction

BROKEN=
NAME="C55x+: PUSH BOTH"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 0d25
pi 1
'
EXPECT='pshboth xar5
'
run_test

# -------------------------------
# RET instruction

BROKEN=
NAME="C55x+: RET"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 21
pi 1
'
EXPECT='ret
'
run_test

# -------------------------------
# RPTBLOCAL instruction

BROKEN=
NAME="C55x+: RPTBLOCAL"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 376e00117b00a0
pi 1
'
EXPECT='rptblocal #0x000011 || sfts ac0, #-1
'
run_test

# -------------------------------
# SFTS instruction

BROKEN=
NAME="C55x+: SFTS"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx a6818133
pi 1
'
EXPECT='sfts ac1, t3, ac1
'
run_test

# -------------------------------
# SFTL instruction

BROKEN=
NAME="C55x+: SFTL"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx a7810131
pi 1
'
EXPECT='sftl ac1, #0x31, ac1
'
run_test

# -------------------------------
# XCCPART instruction

BROKEN=
NAME="C55x+: XCCPART"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 07e4
pi 1
'
EXPECT='xccpart tc1
'
run_test

# -------------------------------
# XCCPART instruction (combined)

BROKEN=
NAME="C55x+: XCCPART (combined with another instruction)"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx 3605a07bb000
pi 1
'
EXPECT='xccpart ac0 <= #0 || mov #0x0, t0
'
run_test

# -------------------------------
# XOR instruction

BROKEN=
NAME="C55x+: XOR"
FILE=malloc://128
CMDS='
e asm.arch=c55+
e io.va=true
wx c5a3230001
pi 1
'
EXPECT='xor #0x1, ar3, ar3
'
run_test


