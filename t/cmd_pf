#!/bin/sh

# GPL 3+ - Copyright (C) 2014

[ -e tests.sh ] && . ./tests.sh || . ../tests.sh

NAME='types'
FILE=malloc://1024
ARGS=
CMDS='wx a00f00002a4b9a020000
pf fcbi foo bar fool beer
'
EXPECT=" foo : 0x00000000 = 4000.000000
 bar : 0x00000004 = 42 ; 42 ; '*'
fool : 0x00000005 = 75 ; 0x4b ; 'K'
beer : 0x00000006 = 666
"
run_test

NAME='word types'
FILE=malloc://1024
ARGS=
CMDS='wx efbeadde002a0000adde
pf qw bigWord beef
'
EXPECT="bigWord : 0x00000000 = (qword) 0x00002a00deadbeef
   beef : 0x00000008 = 0xdead
"
run_test

NAME='Pointers'
FILE=malloc://1024
ARGS=
CMDS='wx 30
wx 20@0x04
wx 40@0x08
wx 2a@0x20
w TROLL@0x30
wx a00f@0x40
e asm.bits=32 # pointer size
pf.plop *z*i*w nb name blob
pf.plop
'
EXPECT="  nb : (*0x30) 0x00000000 = TROLL
name : (*0x20) 0x00000004 = 42
blob : (*0x40) 0x00000008 = 0x0fa0
"
run_test

NAME='swap endianess'
FILE=malloc://1024
ARGS=
CMDS='wx deadbeef00000000adde
pf eqew bigWord beef
'
EXPECT="bigWord : 0x00000000 = (qword) 0xdeadbeef00000000
   beef : 0x00000008 = 0xdead
"
run_test

NAME='String pointer'
FILE=malloc://1024
ARGS=
CMDS='w TROLL @0x30
wx 0x30
wx 0x0fa0 @0x04
e asm.bits=32
pf *zi Pouet Plop
'
EXPECT="Pouet : (*0x30) 0x00000000 = TROLL
 Plop : 0x00000004 = 4000
"
run_test

NAME='named obj'
FILE=malloc://1024
ARGS=
CMDS='wx a00f00004b
pf.troll ic lol cat
pf.troll
'
EXPECT="lol : 0x00000000 = 4000
cat : 0x00000004 = 75 ; 75 ; 'K'
"
run_test

NAME='array obj'
FILE=malloc://1024
ARGS=
CMDS='wx a00f00004b2a0000004c
pf.troll 2ic nb plop
pf.troll
'
EXPECT="0x00000000 [0] {
     nb : 0x00000000 = 4000
   plop : 0x00000004 = 75 ; 75 ; 'K'
}
0x00000005 [1] {
     nb : 0x00000005 = 42
   plop : 0x00000009 = 76 ; 76 ; 'L'
}
"
run_test

NAME='write test'
FILE=malloc://1024
ARGS=
CMDS='wx 32000000424c41424c41424c41424c41
pf.troll izi hu swagg plop
.pf.troll.hu=42
.pf.troll.swagg=BWAAAA
.pf.troll.plop=4000
pf.troll
'
EXPECT="   hu : 0x00000000 = 42
swagg : 0x00000004 = BWAAAABLABLA
 plop : 0x00000011 = 4000
"
run_test

NAME='write wide string'
FILE=malloc://1024
ARGS=
CMDS='wx 42004c00410042004c00410042004c00410042004c0041000000a00f0000
pf.troll Zi swagg plop
pf.troll
.pf.troll.swagg=BWAAAA
.pf.troll.plop=42
pf.troll
'
EXPECT="swagg : 0x00000000 = BLABLABLABLA
 plop : 0x0000001a = 4000
swagg : 0x00000000 = BWAAAA
 plop : 0x0000000e = 42
"
run_test

NAME='fixed size variable'
BROKEN=1
FILE=malloc://1024
ARGS=
CMDS='wx a00f0000000000002a002fa00f000000000000400044adde00000000efbeadde00000000000000000000000040
pf [2]i[3]b[2]f[3]c[3]w[2]q[6]x
'
EXPECT="0x00000000 = [ 4000, 0 ]
0x00000008 = [ 42 ; 0x2a ; '*', 0 ; 0x00 ; '', 47 ; 0x2f ; '/' ]
0x0000000b = [ 4000.000000, 0.000000 ]
0x00000013 = [ 64 ; 64 ; '@', 0 ; 0 ; '', 68 ; 68 ; 'D' ]
0x00000016 = [ 0xdead, 0x0000, 0x0000 ]
0x0000001c = (qword) [ 0x00000000deadbeef, 0x0000000000000000 ]
0x0000002c = [ 0x00000040, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000 ]
"
run_test

NAME='fixed size str, widechar, and var'
FILE=malloc://1024
ARGS=
CMDS='w TROLL
wx 12@0x02
wx a00f@0x0a
ww PLOP@0x16
wx 2a@0x2a
pf [10]z[3]i[10]Zb
'
EXPECT="0x00000000 = TR.LL
0x0000000a = [ 4000, 0, 0 ]
0x00000016 = PLOP
0x0000002a = 42 ; 0x2a ; '*'
"
run_test

NAME='32 bit twice then string'
FILE=malloc://1024
ARGS=
CMDS='e asm.bits=32
wv 0x10
wv 0x10 @ 4
w hello @ 0x10
pf ss
pf *x*x
pf *z*z
'
EXPECT="0x00000000 = 0x00000000 -> 0x00000010 hello
0x00000004 = 0x00000004 -> 0x00000010 hello
(*0x10) 0x00000000 = 0x6c6c6568
(*0x10) 0x00000004 = 0x6c6c6568
(*0x10) 0x00000000 = hello
(*0x10) 0x00000004 = hello
"
run_test

NAME='simple nested struct'
FILE=malloc://1024
ARGS=
CMDS='e asm.bits=32
wx 2a
wx a00f@0x04
wx 2a@0x08
wx 10@0x0a
wx efbe@0x0e
wx 20@0x10
pf.troll iw integer word
pf.plop i??i firstInt (troll)One (troll)Two secondInt
pf.plop
'
EXPECT="  firstInt : 0x00000000 = 42
(troll)One : <struct>
      integer : 0x00000004 = 4000
         word : 0x00000008 = 0x002a
(troll)Two : <struct>
      integer : 0x0000000a = 16
         word : 0x0000000e = 0xbeef
 secondInt : 0x00000010 = 32
"
run_test

NAME='nested struct'
FILE=malloc://1024
ARGS=
CMDS='e asm.bits=32
wx 2a000000a00f00001234100000006416
wx 2a0000002a@0x10
pf.troll iw*? integer word (troll)Bah
pf.plop i?w firstInt (troll)Boh plop
pf.plop
'
EXPECT="  firstInt : 0x00000000 = 42
(troll)Boh : <struct>
         integer : 0x00000004 = 4000
            word : 0x00000008 = 0x3412
      (troll)Bah : (*0x10) <struct>
         integer : 0x00000010 = 42
            word : 0x00000014 = 0x002a
      (troll)Bah : (*0x0) NULL
      plop : 0x0000000e = 0x1664
"
run_test

NAME='complex nested struct'
FILE=malloc://1024
ARGS=
DEBUG=1
CMDS='e asm.bits=32
wx 341289679a020000a00f00002a00300000001442
wx 800600000040@0x20
wx 14000000641620000000@0x30
pf.troll iw*? integer word (troll)Bah
pf.plop i?w first (troll)Boh bwa
pf.gobelin ww? blah meh (plop)Buh
pf.gobelin
'
EXPECT="     blah : 0x00000000 = 0x1234
      meh : 0x00000002 = 0x6789
(plop)Buh : <struct>
           first : 0x00000004 = 666
      (troll)Boh : <struct>
               integer : 0x00000008 = 4000
                  word : 0x0000000c = 0x002a
            (troll)Bah : (*0x30) <struct>
               integer : 0x00000030 = 20
                  word : 0x00000034 = 0x1664
            (troll)Bah : (*0x20) <struct>
               integer : 0x00000020 = 1664
                  word : 0x00000024 = 0x4000
            (troll)Bah : (*0x0) NULL
             bwa : 0x00000012 = 0x4214
"
run_test

NAME='flag for nested struct'
FILE=malloc://1024
ARGS=
DEBUG=1
CMDS='e asm.bits=32
wx 341289679a020000a00f00002a00300000001442
wx 800600000040@0x20
wx 14000000641620000000@0x30
pf.troll iw*? integer word (troll)Bah
pf.plop i?w first (troll)Boh bwa
pf.gobelin ww? blah meh (plop)Buh
pf*.gobelin
'
EXPECT="f blah=0x00000000
f meh=0x00000002
f plop.Buh_first=0x00000004
f troll.Boh_integer=0x00000008
f word=0x0000000c
f troll.Bah_integer=0x00000030
f word=0x00000034
f troll.Bah_integer=0x00000020
f word=0x00000024
f bwa=0x00000012
"
run_test


