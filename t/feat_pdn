#!/bin/sh
# GPL 3+ - Copyright (C) 2012  pancake, Edd Barrett, Simon Ruderich
for a in . .. ../.. ; do [ -e $a/tests.sh ] && . $a/tests.sh ; done

# NAME='pd -10'
# BROKEN=
# FILE=malloc://512
# ARGS=
# CMDS='
# e anal.hasnext=0
# e asm.arch=x86
# e asm.bits=64
# wx b8010000004
# pd -10
# '
# EXPECT="This block size is too big (0x40000<0xfffffffffffffff6). Did you mean 'pd @ 0xfffffff6' instead?
# "
# run_test

NAME='pdn look at bytes'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e anal.hasnext=0
e asm.arch=x86
e asm.bits=64
wx b8010000004839ca7f
pdn 5
pdn 5 x86 32
pdn 3 x86 64 @ 5
pdn 3 x86 32 @ 5
'
EXPECT='0x00000000       b801000000  mov eax, 0x1
0x00000000       b801000000  mov eax, 0x1
0x00000005           4839ca  cmp rdx, rcx
0x00000005               48  dec eax
0x00000006             39ca  cmp edx, ecx
'
run_test

NAME='pdn look at bytes arm then x86 32 and 64'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
wx 20c09fe5
wx b8010000 @5
e asm.arch=arm
e asm.bits=32
pdn 8
pdn 8 x86 32
pdn 8 x86 64
pdn 8 x86
'
EXPECT='0x00000000         20c09fe5  ldr ip, [pc, 32] ; 0x00000028
0x00000001         c09fe500  rsceq r9, r5, r0, asr 31
0x00000002         9fe500b8  stmdalt r0, {r0, r1, r2, r3, r4, r7, r8, sl, sp, lr, pc}
0x00000003         e500b801  ; <UNDEFINED> 0x01b800e5
0x00000000             20c0  and al, al
0x00000001   c09fe500b80100  rcr byte [edi+0x1b800e5], 0x0
0x00000000             20c0  and al, al
0x00000001   c09fe500b80100  rcr byte [rdi+0x1b800e5], 0x0
0x00000000             20c0  and al, al
0x00000001   c09fe500b80100  rcr byte [edi+0x1b800e5], 0x0
'
run_test

# /usr/local/bin/radare2 -e scr.color=0 -N -c 'e asm.arch=x86; e asm.bits=32; e anal.hasnext=0; b 0x4e; wx 743684c0741284d2b8010000007509f3c30f1f8000000000488b4e40; s 0x19; pD -10;' malloc://512

# NAME='pdn look at bytes arm then x86 32 and 64'
# BROKEN=
# FILE=malloc://512
# ARGS=
# CMDS='
# e asm.arch=x86
# e asm.bits=32
# e anal.hasnext=0
# b 0x4e
# wx 743684c0741284d2b8010000007509f3c30f1f8000000000488b4e40
# s 0x19
# pD -10
# pd -10
# s 0x0
# pd 10
# '
# EXPECT='33
# 78
# '
# run_test



NAME='pd & pds -10 nops'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 90909090909090909090909090909090
s 0x0f+1
pd -10
pds -10
pD -10
'
EXPECT='            0x00000006    90           nop
            0x00000007    90           nop
            0x00000008    90           nop
            0x00000009    90           nop
            0x0000000a    90           nop
            0x0000000b    90           nop
            0x0000000c    90           nop
            0x0000000d    90           nop
            0x0000000e    90           nop
            0x0000000f    90           nop
------
            0x00000006    90           nop
            0x00000007    90           nop
            0x00000008    90           nop
            0x00000009    90           nop
            0x0000000a    90           nop
            0x0000000b    90           nop
            0x0000000c    90           nop
            0x0000000d    90           nop
            0x0000000e    90           nop
            0x0000000f    90           nop
            0x00000006    90           nop
            0x00000007    90           nop
            0x00000008    90           nop
            0x00000009    90           nop
            0x0000000a    90           nop
            0x0000000b    90           nop
            0x0000000c    90           nop
            0x0000000d    90           nop
            0x0000000e    90           nop
            0x0000000f    90           nop
------
'
run_test

# /usr/local/bin/radare2 -e scr.color=0 -N -c 'e asm.arch=x86; e asm.bits=32; e anal.hasnext=0; b 0x4e; wx 743684c0741284d2b8010000007509f3c30f1f8000000000488b4e40; pD 10;' malloc://512

NAME='wx, s 4 pds -2'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
s 4
pds -2
'
EXPECT='            0x00000000    0000         add [eax], al
            0x00000002    0000         add [eax], al
'
run_test

NAME='wx, pds -2 @ 4'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pds -2 @ 4
'
EXPECT='            0x00000000    0000         add [eax], al
            0x00000002    0000         add [eax], al
'
run_test


NAME='wx, pds -2 @ 7'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pds -2 @ 7
'
EXPECT='            0x00000005    90           nop
            0x00000006    90           nop
'
run_test



NAME='wx, pds -2 @ 3'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pds -2 @ 3
'
EXPECT='            0x00000001    0000         add [eax], al
'
run_test

NAME='wx, pds -2 @ 2'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pds -2 @ 2
'
EXPECT='            0x00000000    0000         add [eax], al
            0xfffffffffffffffe    ff           invalid
'
run_test


NAME='wx, pds -5 @ 6'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pds -5 @ 6
'
EXPECT='            0x00000000    0000         add [eax], al
            0x00000002    0000         add [eax], al
            0x00000004    90           nop
            0x00000005    90           nop
            0xfffffffffffffffe    ff           invalid
'
run_test

NAME='wx, pDs -5 @ 6'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pDs -5 @ 6
'
EXPECT='            0x00000002    0000         add [eax], al
            0x00000003    00           invalid
            0x00000004    90           nop
            0x00000005    90           nop
            0x00000006    90           nop
'
run_test


NAME='wx, pDs -9 @ 6'
BROKEN=
FILE=malloc://512
ARGS=
CMDS='
e asm.arch=x86
e asm.bits=32
e anal.hasnext=0
wx 0000000090909090909090909090909090
pDs -9 @ 6
'
EXPECT='            0x00000000    0000         add [eax], al
            0x00000002    0000         add [eax], al
            0x00000003    00           invalid
            0x00000004    90           nop
            0x00000005    90           nop
            0x00000006    90           nop
            0xfffffffffffffffe    ff           invalid
'
run_test

